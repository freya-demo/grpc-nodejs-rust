// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: hello_world.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "hello_world";

export interface Request {
  helloString: string;
}

export interface Response {
  helloWorldString: string;
}

function createBaseRequest(): Request {
  return { helloString: "" };
}

export const Request = {
  encode(message: Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.helloString !== "") {
      writer.uint32(10).string(message.helloString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.helloString = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return { helloString: isSet(object.helloString) ? globalThis.String(object.helloString) : "" };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.helloString !== "") {
      obj.helloString = message.helloString;
    }
    return obj;
  },

  create(base?: DeepPartial<Request>): Request {
    return Request.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Request>): Request {
    const message = createBaseRequest();
    message.helloString = object.helloString ?? "";
    return message;
  },
};

function createBaseResponse(): Response {
  return { helloWorldString: "" };
}

export const Response = {
  encode(message: Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.helloWorldString !== "") {
      writer.uint32(10).string(message.helloWorldString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.helloWorldString = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return { helloWorldString: isSet(object.helloWorldString) ? globalThis.String(object.helloWorldString) : "" };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.helloWorldString !== "") {
      obj.helloWorldString = message.helloWorldString;
    }
    return obj;
  },

  create(base?: DeepPartial<Response>): Response {
    return Response.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Response>): Response {
    const message = createBaseResponse();
    message.helloWorldString = object.helloWorldString ?? "";
    return message;
  },
};

export type HelloWorldDefinition = typeof HelloWorldDefinition;
export const HelloWorldDefinition = {
  name: "HelloWorld",
  fullName: "hello_world.HelloWorld",
  methods: {
    helloWorld: {
      name: "HelloWorld",
      requestType: Request,
      requestStream: false,
      responseType: Response,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface HelloWorldServiceImplementation<CallContextExt = {}> {
  helloWorld(request: Request, context: CallContext & CallContextExt): Promise<DeepPartial<Response>>;
}

export interface HelloWorldClient<CallOptionsExt = {}> {
  helloWorld(request: DeepPartial<Request>, options?: CallOptions & CallOptionsExt): Promise<Response>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
