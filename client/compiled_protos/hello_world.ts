// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: hello_world.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "hello_world";

export interface HelloWorldRequest {
  helloString: string;
}

export interface HelloWorldResponse {
  helloWorldString: string;
}

export interface DemoList {
  demoStr: string[];
}

function createBaseHelloWorldRequest(): HelloWorldRequest {
  return { helloString: "" };
}

export const HelloWorldRequest = {
  encode(message: HelloWorldRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.helloString !== "") {
      writer.uint32(10).string(message.helloString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HelloWorldRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloWorldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.helloString = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HelloWorldRequest {
    return { helloString: isSet(object.helloString) ? globalThis.String(object.helloString) : "" };
  },

  toJSON(message: HelloWorldRequest): unknown {
    const obj: any = {};
    if (message.helloString !== "") {
      obj.helloString = message.helloString;
    }
    return obj;
  },

  create(base?: DeepPartial<HelloWorldRequest>): HelloWorldRequest {
    return HelloWorldRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HelloWorldRequest>): HelloWorldRequest {
    const message = createBaseHelloWorldRequest();
    message.helloString = object.helloString ?? "";
    return message;
  },
};

function createBaseHelloWorldResponse(): HelloWorldResponse {
  return { helloWorldString: "" };
}

export const HelloWorldResponse = {
  encode(message: HelloWorldResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.helloWorldString !== "") {
      writer.uint32(10).string(message.helloWorldString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HelloWorldResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloWorldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.helloWorldString = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HelloWorldResponse {
    return { helloWorldString: isSet(object.helloWorldString) ? globalThis.String(object.helloWorldString) : "" };
  },

  toJSON(message: HelloWorldResponse): unknown {
    const obj: any = {};
    if (message.helloWorldString !== "") {
      obj.helloWorldString = message.helloWorldString;
    }
    return obj;
  },

  create(base?: DeepPartial<HelloWorldResponse>): HelloWorldResponse {
    return HelloWorldResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HelloWorldResponse>): HelloWorldResponse {
    const message = createBaseHelloWorldResponse();
    message.helloWorldString = object.helloWorldString ?? "";
    return message;
  },
};

function createBaseDemoList(): DemoList {
  return { demoStr: [] };
}

export const DemoList = {
  encode(message: DemoList, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.demoStr) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DemoList {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDemoList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.demoStr.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DemoList {
    return {
      demoStr: globalThis.Array.isArray(object?.demoStr) ? object.demoStr.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: DemoList): unknown {
    const obj: any = {};
    if (message.demoStr?.length) {
      obj.demoStr = message.demoStr;
    }
    return obj;
  },

  create(base?: DeepPartial<DemoList>): DemoList {
    return DemoList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DemoList>): DemoList {
    const message = createBaseDemoList();
    message.demoStr = object.demoStr?.map((e) => e) || [];
    return message;
  },
};

export type HelloWorldDefinition = typeof HelloWorldDefinition;
export const HelloWorldDefinition = {
  name: "HelloWorld",
  fullName: "hello_world.HelloWorld",
  methods: {
    helloWorld: {
      name: "HelloWorld",
      requestType: HelloWorldRequest,
      requestStream: false,
      responseType: HelloWorldResponse,
      responseStream: false,
      options: {},
    },
    echoList: {
      name: "EchoList",
      requestType: DemoList,
      requestStream: false,
      responseType: DemoList,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface HelloWorldServiceImplementation<CallContextExt = {}> {
  helloWorld(
    request: HelloWorldRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HelloWorldResponse>>;
  echoList(request: DemoList, context: CallContext & CallContextExt): Promise<DeepPartial<DemoList>>;
}

export interface HelloWorldClient<CallOptionsExt = {}> {
  helloWorld(
    request: DeepPartial<HelloWorldRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HelloWorldResponse>;
  echoList(request: DeepPartial<DemoList>, options?: CallOptions & CallOptionsExt): Promise<DemoList>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
