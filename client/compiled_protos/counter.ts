// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: counter.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal.js";
import { Empty } from "./google/protobuf/empty.js";

export const protobufPackage = "counter";

export interface CounterDelta {
  delta: number;
}

export interface CounterDeltaWithId {
  delta: number;
  id: number;
}

export interface CounterState {
  counter: number;
}

export interface ListenersCount {
  number: number;
}

function createBaseCounterDelta(): CounterDelta {
  return { delta: 0 };
}

export const CounterDelta = {
  encode(message: CounterDelta, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.delta !== 0) {
      writer.uint32(8).int32(message.delta);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CounterDelta {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCounterDelta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.delta = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CounterDelta {
    return { delta: isSet(object.delta) ? globalThis.Number(object.delta) : 0 };
  },

  toJSON(message: CounterDelta): unknown {
    const obj: any = {};
    if (message.delta !== 0) {
      obj.delta = Math.round(message.delta);
    }
    return obj;
  },

  create(base?: DeepPartial<CounterDelta>): CounterDelta {
    return CounterDelta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CounterDelta>): CounterDelta {
    const message = createBaseCounterDelta();
    message.delta = object.delta ?? 0;
    return message;
  },
};

function createBaseCounterDeltaWithId(): CounterDeltaWithId {
  return { delta: 0, id: 0 };
}

export const CounterDeltaWithId = {
  encode(message: CounterDeltaWithId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.delta !== 0) {
      writer.uint32(8).int32(message.delta);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CounterDeltaWithId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCounterDeltaWithId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.delta = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CounterDeltaWithId {
    return {
      delta: isSet(object.delta) ? globalThis.Number(object.delta) : 0,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
    };
  },

  toJSON(message: CounterDeltaWithId): unknown {
    const obj: any = {};
    if (message.delta !== 0) {
      obj.delta = Math.round(message.delta);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<CounterDeltaWithId>): CounterDeltaWithId {
    return CounterDeltaWithId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CounterDeltaWithId>): CounterDeltaWithId {
    const message = createBaseCounterDeltaWithId();
    message.delta = object.delta ?? 0;
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseCounterState(): CounterState {
  return { counter: 0 };
}

export const CounterState = {
  encode(message: CounterState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.counter !== 0) {
      writer.uint32(8).int32(message.counter);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CounterState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCounterState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.counter = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CounterState {
    return { counter: isSet(object.counter) ? globalThis.Number(object.counter) : 0 };
  },

  toJSON(message: CounterState): unknown {
    const obj: any = {};
    if (message.counter !== 0) {
      obj.counter = Math.round(message.counter);
    }
    return obj;
  },

  create(base?: DeepPartial<CounterState>): CounterState {
    return CounterState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CounterState>): CounterState {
    const message = createBaseCounterState();
    message.counter = object.counter ?? 0;
    return message;
  },
};

function createBaseListenersCount(): ListenersCount {
  return { number: 0 };
}

export const ListenersCount = {
  encode(message: ListenersCount, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.number !== 0) {
      writer.uint32(8).uint32(message.number);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListenersCount {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListenersCount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.number = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListenersCount {
    return { number: isSet(object.number) ? globalThis.Number(object.number) : 0 };
  },

  toJSON(message: ListenersCount): unknown {
    const obj: any = {};
    if (message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    return obj;
  },

  create(base?: DeepPartial<ListenersCount>): ListenersCount {
    return ListenersCount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListenersCount>): ListenersCount {
    const message = createBaseListenersCount();
    message.number = object.number ?? 0;
    return message;
  },
};

export type SingleCounterDefinition = typeof SingleCounterDefinition;
export const SingleCounterDefinition = {
  name: "SingleCounter",
  fullName: "counter.SingleCounter",
  methods: {
    increase: {
      name: "Increase",
      requestType: CounterDelta,
      requestStream: false,
      responseType: CounterState,
      responseStream: false,
      options: {},
    },
    current: {
      name: "Current",
      requestType: Empty,
      requestStream: false,
      responseType: CounterState,
      responseStream: false,
      options: {},
    },
    listenDelta: {
      name: "ListenDelta",
      requestType: Empty,
      requestStream: false,
      responseType: CounterDeltaWithId,
      responseStream: true,
      options: {},
    },
    getListenersCount: {
      name: "GetListenersCount",
      requestType: Empty,
      requestStream: false,
      responseType: ListenersCount,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SingleCounterServiceImplementation<CallContextExt = {}> {
  increase(request: CounterDelta, context: CallContext & CallContextExt): Promise<DeepPartial<CounterState>>;
  current(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<CounterState>>;
  listenDelta(
    request: Empty,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<CounterDeltaWithId>>;
  getListenersCount(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<ListenersCount>>;
}

export interface SingleCounterClient<CallOptionsExt = {}> {
  increase(request: DeepPartial<CounterDelta>, options?: CallOptions & CallOptionsExt): Promise<CounterState>;
  current(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<CounterState>;
  listenDelta(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): AsyncIterable<CounterDeltaWithId>;
  getListenersCount(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<ListenersCount>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };
